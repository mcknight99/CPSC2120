For this lab you will implement two searches and two sorts

Searches - The searches will take a data vector and an element to find, 
and return the index of the element in the vector, and -1 if the item is not found in the vector.  
Searches must work for integer, double, char, and string.  
Whether this is accomplished through templating or overloading is up to you.  
Must be named linearSearch and binarySearch.

Linear Search
Binary Search
Sorts - The sorts will take a data vector and return a sorted copy of the vector.  
    Sorts must also work for integer, double, char, and string as with the searches.  
    Must be named mergeSort and quickSort.

Quicksort
Merge Sort
When implementing quicksort keep in mind that the index for the pivot value is selected at random. 
This is done by generating a random integer. 
An easy way of doing this is to use the rand() function which returns an integer value 
    between 0 and RAND_MAX (typically 2^31 - 1) so if you want a random index between 0 and 
    lst.size()-1 you can use rand() % lst.size(). The rand() function is defined in cstdlib (#include <cstdlib>).

You may include additional helper functions, if you wish. Submit Searches.h and Sorts.h with the implemented functions.

T#.cpp is the main function for test case #, returns 0 when test case passes, returns 1 when test case fails.